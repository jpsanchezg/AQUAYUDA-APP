import React from 'react';
import { render, cleanup, fireEvent } from '@testing-library/react';
import useQuickReplies from '../useQuickReplies';
afterEach(cleanup);
describe('useQuickReplies', function () {
  it('should be empty array by default', function () {
    function Test() {
      var _useQuickReplies = useQuickReplies(),
          quickReplies = _useQuickReplies.quickReplies;

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t);
      }));
    }

    var _render = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render.queryAllByTestId;

    expect(queryAllByTestId('item').length).toBe(0);
  });
  it('should have initial value', function () {
    function Test() {
      var _useQuickReplies2 = useQuickReplies([{
        name: 'test1'
      }, {
        name: 'test2'
      }]),
          quickReplies = _useQuickReplies2.quickReplies;

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.name);
      }));
    }

    var _render2 = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render2.queryAllByTestId;

    expect(queryAllByTestId('item').length).toBe(2);
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test2');
  });
  it('should prepend items', function () {
    function Test() {
      var _useQuickReplies3 = useQuickReplies([{
        name: 'test1'
      }, {
        name: 'test2'
      }]),
          quickReplies = _useQuickReplies3.quickReplies,
          prepend = _useQuickReplies3.prepend;

      function handleClick() {
        prepend([{
          name: 'test3'
        }, {
          name: 'test4'
        }]);
      }

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.name);
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render3 = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render3.queryAllByTestId,
        getByTestId = _render3.getByTestId;

    fireEvent.click(getByTestId('btn'));
    expect(queryAllByTestId('item').length).toBe(4);
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
    expect(queryAllByTestId('item')[2]).toHaveTextContent('test1');
    expect(queryAllByTestId('item')[3]).toHaveTextContent('test2');
  });
  it('should replace items', function () {
    function Test() {
      var _useQuickReplies4 = useQuickReplies([{
        name: 'test1'
      }, {
        name: 'test2'
      }]),
          quickReplies = _useQuickReplies4.quickReplies,
          replace = _useQuickReplies4.replace;

      function handleClick() {
        replace([{
          name: 'test3'
        }, {
          name: 'test4'
        }]);
      }

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.name);
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render4 = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render4.queryAllByTestId,
        getByTestId = _render4.getByTestId;

    fireEvent.click(getByTestId('btn'));
    expect(queryAllByTestId('item').length).toBe(2);
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
  });
  it('should restore items', function () {
    function Test() {
      var _useQuickReplies5 = useQuickReplies([{
        name: 'test1'
      }, {
        name: 'test2'
      }]),
          quickReplies = _useQuickReplies5.quickReplies,
          replace = _useQuickReplies5.replace,
          save = _useQuickReplies5.save,
          pop = _useQuickReplies5.pop;

      function handleReplace() {
        replace([{
          name: 'test3'
        }, {
          name: 'test4'
        }]);
      }

      function handleSave() {
        save();
      }

      function handlePop() {
        pop();
      }

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.name);
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "replace",
        onClick: handleReplace
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "save",
        onClick: handleSave
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "pop",
        onClick: handlePop
      }));
    }

    var _render5 = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render5.queryAllByTestId,
        getByTestId = _render5.getByTestId;

    fireEvent.click(getByTestId('save'));
    fireEvent.click(getByTestId('replace'));
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
    fireEvent.click(getByTestId('pop'));
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test1');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test2');
  });
  it('should ignore restore when not saved', function () {
    function Test() {
      var _useQuickReplies6 = useQuickReplies([{
        name: 'test1'
      }, {
        name: 'test2'
      }]),
          quickReplies = _useQuickReplies6.quickReplies,
          replace = _useQuickReplies6.replace,
          pop = _useQuickReplies6.pop;

      function handleReplace() {
        replace([{
          name: 'test3'
        }, {
          name: 'test4'
        }]);
      }

      function handlePop() {
        pop();
      }

      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "list"
      }, quickReplies.map(function (t, i) {
        return /*#__PURE__*/React.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.name);
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "replace",
        onClick: handleReplace
      }), /*#__PURE__*/React.createElement("button", {
        "data-testid": "pop",
        onClick: handlePop
      }));
    }

    var _render6 = render( /*#__PURE__*/React.createElement(Test, null)),
        queryAllByTestId = _render6.queryAllByTestId,
        getByTestId = _render6.getByTestId;

    fireEvent.click(getByTestId('replace'));
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
    fireEvent.click(getByTestId('pop'));
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
  });
});