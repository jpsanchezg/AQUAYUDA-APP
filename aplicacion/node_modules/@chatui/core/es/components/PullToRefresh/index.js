import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { createRef } from 'react';
import clsx from 'clsx';
import { setTransform } from '../../utils/style';
import { Icon } from '../Icon';
import { Flex } from '../Flex';
import { Button } from '../Button';
import canUse from '../../utils/canUse';
var willPreventDefault = canUse('passiveListener') ? {
  passive: false
} : false; // const willNotPreventDefault = supportsPassive ? { passive: true } : false;

export var PullToRefresh = /*#__PURE__*/function (_React$Component) {
  _inherits(PullToRefresh, _React$Component);

  var _super = _createSuper(PullToRefresh);

  function PullToRefresh(props) {
    var _this;

    _classCallCheck(this, PullToRefresh);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "wrapperRef", /*#__PURE__*/createRef());

    _defineProperty(_assertThisInitialized(_this), "contentRef", /*#__PURE__*/createRef());

    _defineProperty(_assertThisInitialized(_this), "startY", 0);

    _defineProperty(_assertThisInitialized(_this), "useFallback", void 0);

    _defineProperty(_assertThisInitialized(_this), "canPull", false);

    _defineProperty(_assertThisInitialized(_this), "touchStart", function (e) {
      _this.startY = e.touches[0].clientY;
      _this.canPull = _this.wrapperRef.current.scrollTop === 0;

      if (_this.canPull) {
        _this.setState({
          status: 'pull',
          dropped: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "touchMove", function (e) {
      var _this$props = _this.props,
          distance = _this$props.distance,
          maxDistance = _this$props.maxDistance,
          distanceRatio = _this$props.distanceRatio;
      var status = _this.state.status;
      var currentY = e.touches[0].clientY;
      if (!_this.canPull || currentY < _this.startY || status === 'loading') return;
      var dist = (currentY - _this.startY) / distanceRatio;

      if (maxDistance && dist > maxDistance) {
        dist = maxDistance;
      }

      if (dist > 0) {
        if (e.cancelable) {
          e.preventDefault();
        }

        e.stopPropagation();

        _this.setContentStyle(dist);

        _this.setState({
          distance: dist,
          status: dist >= distance ? 'active' : 'pull'
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "touchEnd", function () {
      var status = _this.state.status;

      _this.setState({
        dropped: true
      });

      if (status === 'active') {
        _this.handleLoadMore();
      } else {
        _this.reset();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "scrollTo", function (_ref) {
      var y = _ref.y,
          _ref$animated = _ref.animated,
          animated = _ref$animated === void 0 ? true : _ref$animated;
      var scroller = _this.wrapperRef.current;

      if (canUse('smoothScroll') && animated) {
        scroller.scrollTo({
          top: y,
          behavior: 'smooth'
        });
      } else {
        scroller.scrollTop = y;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "scrollToEnd", function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$animated = _ref2.animated,
          animated = _ref2$animated === void 0 ? true : _ref2$animated;

      var scroller = _this.wrapperRef.current;
      var y = scroller.scrollHeight - scroller.offsetHeight;

      _this.scrollTo({
        y: y,
        animated: animated
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleLoadMore", function () {
      var _this$props2 = _this.props,
          loadingDistance = _this$props2.loadingDistance,
          onRefresh = _this$props2.onRefresh;
      var scroller = _this.wrapperRef.current;

      _this.setState({
        status: 'loading'
      }, function () {
        if (!_this.useFallback) {
          _this.setContentStyle(loadingDistance);
        }
      });

      try {
        var sh = scroller.scrollHeight;
        onRefresh().then(function (res) {
          var handleOffset = function handleOffset() {
            _this.scrollTo({
              y: scroller.scrollHeight - sh - 50,
              animated: false
            });
          }; // 考虑做成可配置


          handleOffset();
          setTimeout(handleOffset, 150);
          setTimeout(handleOffset, 300);

          _this.reset();

          if (res && res.noMore) {
            _this.setState({
              disabled: true
            });
          }
        });
      } catch (ex) {
        // eslint-disable-next-line no-console
        console.error(ex);

        _this.reset();
      }
    });

    _this.state = {
      distance: 0,
      status: 'pending',
      // pending | pull | active | loading
      dropped: false,
      disabled: !props.onRefresh
    };
    _this.useFallback = !canUse('touch');
    return _this;
  }

  _createClass(PullToRefresh, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var disabled = this.state.disabled;
      if (disabled || this.useFallback) return;
      var wrapper = this.wrapperRef.current;

      if (wrapper) {
        wrapper.addEventListener('touchstart', this.touchStart);
        wrapper.addEventListener('touchmove', this.touchMove, willPreventDefault);
        wrapper.addEventListener('touchend', this.touchEnd);
        wrapper.addEventListener('touchcancel', this.touchEnd);
      }
    }
  }, {
    key: "setContentStyle",
    value: function setContentStyle(y) {
      var content = this.contentRef.current;

      if (content) {
        setTransform(content, "translate3d(0px,".concat(y, "px,0)"));
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        distance: 0,
        status: 'pending'
      });
      this.setContentStyle(0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          renderIndicator = _this$props3.renderIndicator,
          loadMoreText = _this$props3.loadMoreText,
          children = _this$props3.children,
          onScroll = _this$props3.onScroll;
      var _this$state = this.state,
          status = _this$state.status,
          distance = _this$state.distance,
          dropped = _this$state.dropped,
          disabled = _this$state.disabled;
      return /*#__PURE__*/React.createElement("div", {
        className: "PullToRefresh",
        ref: this.wrapperRef,
        onScroll: onScroll
      }, /*#__PURE__*/React.createElement("div", {
        className: "PullToRefresh-inner"
      }, /*#__PURE__*/React.createElement("div", {
        className: clsx('PullToRefresh-content', {
          'PullToRefresh-transition': dropped
        }),
        ref: this.contentRef
      }, /*#__PURE__*/React.createElement("div", {
        className: "PullToRefresh-indicator"
      }, renderIndicator(status, distance)), !disabled && this.useFallback && /*#__PURE__*/React.createElement(Flex, {
        className: "PullToRefresh-fallback",
        center: true
      }, renderIndicator(status, distance), /*#__PURE__*/React.createElement(Button, {
        className: "PullToRefresh-loadMore",
        variant: "text",
        onClick: this.handleLoadMore
      }, loadMoreText)), React.Children.only(children))));
    }
  }]);

  return PullToRefresh;
}(React.Component);

_defineProperty(PullToRefresh, "defaultProps", {
  distance: 30,
  loadingDistance: 30,
  distanceRatio: 2,
  loadMoreText: '点击加载更多',
  renderIndicator: function renderIndicator(status) {
    if (status === 'active' || status === 'loading') {
      return /*#__PURE__*/React.createElement(Icon, {
        className: "PullToRefresh-spinner",
        type: "spinner",
        spin: true
      });
    }

    return null;
  }
});