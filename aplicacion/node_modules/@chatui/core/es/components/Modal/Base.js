import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import clsx from 'clsx';
import useMount from '../../hooks/useMount';
import { Backdrop } from '../Backdrop';
import { IconButton } from '../IconButton';
import { Button } from '../Button';
import useNextId from '../../hooks/useNextId';
import toggleClass from '../../utils/toggleClass';
export var Base = function Base(props) {
  var baseClass = props.baseClass,
      active = props.active,
      className = props.className,
      title = props.title,
      _props$titleId = props.titleId,
      titleId = _props$titleId === void 0 ? useNextId('modal-') : _props$titleId,
      _props$showClose = props.showClose,
      showClose = _props$showClose === void 0 ? true : _props$showClose,
      _props$autoFocus = props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
      _props$backdrop = props.backdrop,
      backdrop = _props$backdrop === void 0 ? true : _props$backdrop,
      overflow = props.overflow,
      actions = props.actions,
      _props$vertical = props.vertical,
      vertical = _props$vertical === void 0 ? true : _props$vertical,
      children = props.children,
      onClose = props.onClose;
  var wrapper = useRef(null);

  var _useMount = useMount({
    active: active,
    ref: wrapper
  }),
      didMount = _useMount.didMount,
      isShow = _useMount.isShow;

  useEffect(function () {
    if (autoFocus && wrapper.current) {
      wrapper.current.focus();
    }
  }, [autoFocus, didMount]);
  useEffect(function () {
    toggleClass('S--modalOpen', isShow);
  }, [isShow]);
  if (!didMount) return null;
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement("div", {
    className: clsx(baseClass, className, {
      active: isShow
    }),
    ref: wrapper,
    tabIndex: -1
  }, backdrop && /*#__PURE__*/React.createElement(Backdrop, {
    active: isShow,
    onClick: backdrop === true && onClose ? onClose : undefined
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(baseClass, "-dialog"),
    role: "dialog",
    "aria-labelledby": titleId,
    "aria-modal": true
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(baseClass, "-content")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(baseClass, "-header")
  }, /*#__PURE__*/React.createElement("h5", {
    className: "".concat(baseClass, "-title"),
    id: titleId
  }, title), showClose && onClose && /*#__PURE__*/React.createElement(IconButton, {
    className: "".concat(baseClass, "-close"),
    icon: "close",
    onClick: onClose,
    "aria-label": "\u5173\u95ED"
  })), /*#__PURE__*/React.createElement("div", {
    className: clsx("".concat(baseClass, "-body"), {
      overflow: overflow
    })
  }, children), actions && /*#__PURE__*/React.createElement("div", {
    className: "".concat(baseClass, "-footer ").concat(baseClass, "-footer--").concat(vertical ? 'v' : 'h')
  }, actions.map(function (item, i) {
    return /*#__PURE__*/React.createElement(Button, _extends({}, item, {
      key: i
    }));
  }))))), document.body);
};