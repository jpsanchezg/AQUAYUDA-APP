import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useContext } from 'react';
import defaultLocales from './locales';
var LocaleContext = /*#__PURE__*/React.createContext(undefined);
var DEFAULT_LOCALE = 'en-US';

var LocaleProvider = function LocaleProvider(_ref) {
  var locale = _ref.locale,
      locales = _ref.locales,
      children = _ref.children;
  return /*#__PURE__*/React.createElement(LocaleContext.Provider, {
    value: {
      locale: locale,
      locales: locales
    }
  }, children);
};

LocaleProvider.defaultProps = {
  locale: DEFAULT_LOCALE
};

var useLocale = function useLocale(comp) {
  var localeContext = useContext(LocaleContext);
  var locale = localeContext.locale,
      locales = localeContext.locales;
  var defaultStrings = locale && defaultLocales[locale] || defaultLocales[DEFAULT_LOCALE];
  var strings = locales ? _objectSpread(_objectSpread({}, defaultStrings), locales) : defaultStrings;

  if (comp) {
    strings = strings[comp];
  }

  return {
    locale: locale,
    trans: function trans(key) {
      return key ? strings[key] : strings;
    }
  };
};

export { LocaleProvider, LocaleContext, useLocale };