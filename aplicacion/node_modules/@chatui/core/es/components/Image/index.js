import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState, useEffect, useRef } from 'react';
import clsx from 'clsx';
;
export var Image = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      oSrc = props.src,
      _props$alt = props.alt,
      alt = _props$alt === void 0 ? '' : _props$alt,
      lazy = props.lazy,
      fluid = props.fluid,
      children = props.children,
      other = _objectWithoutProperties(props, ["className", "src", "alt", "lazy", "fluid", "children"]);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      src = _useState2[0],
      setSrc = _useState2[1];

  var imgRef = ref || useRef(null);
  var savedSrc = useRef('');
  var lazyLoaded = useRef(false);
  useEffect(function () {
    if (!lazy) return undefined;
    var observer = new IntersectionObserver(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          entry = _ref2[0];

      if (entry.isIntersecting) {
        setSrc(savedSrc.current);
        lazyLoaded.current = true;
        observer.unobserve(entry.target);
      }
    });
    observer.observe(imgRef.current);
    return function () {
      observer.disconnect();
    };
  }, []);
  useEffect(function () {
    savedSrc.current = oSrc;
    setSrc(lazy && !lazyLoaded.current ? '' : oSrc);
  }, [oSrc]);
  return /*#__PURE__*/React.createElement("img", _extends({
    className: clsx('Image', {
      'Image--fluid': fluid
    }, className),
    src: src,
    alt: alt,
    ref: imgRef
  }, other));
});