import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState } from 'react';
import clsx from 'clsx';
import { Icon } from '../Icon';
import { IconButton } from '../IconButton';
import { Input } from '../Input';
export var Search = function Search(_ref) {
  var className = _ref.className,
      onSearch = _ref.onSearch,
      onCancel = _ref.onCancel,
      value = _ref.value,
      _ref$clearable = _ref.clearable,
      clearable = _ref$clearable === void 0 ? true : _ref$clearable,
      other = _objectWithoutProperties(_ref, ["className", "onSearch", "onCancel", "value", "clearable"]);

  var _useState = useState(value || ''),
      _useState2 = _slicedToArray(_useState, 2),
      query = _useState2[0],
      setQuery = _useState2[1];

  function handleChange(val) {
    setQuery(val);
  }

  function handleClear() {
    setQuery('');
  }

  function handleKeyDown(e) {
    if (e.keyCode === 13) {
      if (onSearch) {
        onSearch(query);
      }

      e.preventDefault();
    }
  }

  return /*#__PURE__*/React.createElement("div", {
    className: clsx('Search', className)
  }, /*#__PURE__*/React.createElement(Icon, {
    className: "Search-icon",
    type: "search"
  }), /*#__PURE__*/React.createElement(Input, _extends({
    className: "Search-input",
    type: "search",
    value: query,
    onChange: handleChange,
    onKeyDown: handleKeyDown
  }, other)), clearable && query && /*#__PURE__*/React.createElement(IconButton, {
    className: "Search-clear",
    icon: "close",
    onClick: handleClear
  }));
};