"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageContainer = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _PullToRefresh = require("../PullToRefresh");

var _Message = _interopRequireDefault(require("../Message/Message"));

var _canUse = _interopRequireDefault(require("../../utils/canUse"));

var MessageContainer = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var messages = props.messages,
      loadMoreText = props.loadMoreText,
      onRefresh = props.onRefresh,
      onScroll = props.onScroll,
      renderBeforeMessageList = props.renderBeforeMessageList,
      renderMessageContent = props.renderMessageContent;
  var messagesRef = (0, _react.useRef)(null);
  var scroller = (0, _react.useRef)(null);
  var lastMessage = messages[messages.length - 1];
  (0, _react.useEffect)(function () {
    var wrapper = scroller.current.wrapperRef.current;
    var animated = !!wrapper.scrollTop;
    scroller.current.scrollToEnd({
      animated: animated
    });
  }, [lastMessage]);
  (0, _react.useEffect)(function () {
    var wrapper = messagesRef.current;
    if (!wrapper) return;
    var willPreventDefault = (0, _canUse.default)('passiveListener') ? {
      passive: false
    } : false;
    var needBlur = false;
    var startY = 0;

    function reset() {
      needBlur = false;
      startY = 0;
    }

    function touchStart(e) {
      var _document = document,
          activeElement = _document.activeElement;

      if (activeElement && activeElement.nodeName === 'TEXTAREA') {
        needBlur = true;
        startY = e.touches[0].clientY;
      }
    }

    function touchMove(e) {
      if (needBlur && Math.abs(e.touches[0].clientY - startY) > 20) {
        document.activeElement.blur();
        reset();
      }
    }

    wrapper.addEventListener('touchstart', touchStart);
    wrapper.addEventListener('touchmove', touchMove, willPreventDefault);
    wrapper.addEventListener('touchend', reset);
    wrapper.addEventListener('touchcancel', reset);
    return function () {
      wrapper.removeEventListener('touchstart', touchStart);
      wrapper.removeEventListener('touchmove', touchMove);
      wrapper.removeEventListener('touchend', reset);
      wrapper.removeEventListener('touchcancel', reset);
    };
  }, []);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      ref: messagesRef,
      scrollToEnd: scroller.current.scrollToEnd
    };
  }, []);

  function handleScroll(e) {
    if (onScroll) {
      onScroll(e);
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "MessageContainer",
    ref: messagesRef,
    tabIndex: -1
  }, renderBeforeMessageList && renderBeforeMessageList(), /*#__PURE__*/_react.default.createElement(_PullToRefresh.PullToRefresh, {
    onRefresh: onRefresh,
    onScroll: handleScroll,
    loadMoreText: loadMoreText,
    ref: scroller
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "MessageList"
  }, messages.map(function (msg) {
    return /*#__PURE__*/_react.default.createElement(_Message.default, (0, _extends2.default)({}, msg, {
      renderMessageContent: renderMessageContent,
      key: msg._id
    }));
  }))));
});

exports.MessageContainer = MessageContainer;