"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Composer = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Input = require("../Input");

var _Recorder = require("../Recorder");

var _Toolbar = require("../Toolbar");

var _ClickOutside = require("../ClickOutside");

var _Popover = require("../Popover");

var _SendConfirm = require("../SendConfirm");

var _ToolbarItem = require("./ToolbarItem");

var _Action = require("./Action");

var _riseInput = _interopRequireDefault(require("./riseInput"));

var _parseDataTransfer = _interopRequireDefault(require("../../utils/parseDataTransfer"));

var _toggleClass = _interopRequireDefault(require("../../utils/toggleClass"));

/* eslint-disable react/forbid-prop-types */
var NO_HOME_BAR = 'S--noHomeBar';

var Composer = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _props$text = props.text,
      initialText = _props$text === void 0 ? '' : _props$text,
      _props$inputType = props.inputType,
      initialInputType = _props$inputType === void 0 ? 'text' : _props$inputType,
      wideBreakpoint = props.wideBreakpoint,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '请输入...' : _props$placeholder,
      _props$recorder = props.recorder,
      recorder = _props$recorder === void 0 ? {} : _props$recorder,
      onInputTypeChange = props.onInputTypeChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onSend = props.onSend,
      onImageSend = props.onImageSend,
      onAccessoryToggle = props.onAccessoryToggle,
      _props$toolbar = props.toolbar,
      toolbar = _props$toolbar === void 0 ? [] : _props$toolbar,
      onToolbarClick = props.onToolbarClick,
      rightAction = props.rightAction;

  var _useState = (0, _react.useState)(initialText),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      text = _useState2[0],
      _setText = _useState2[1];

  var _useState3 = (0, _react.useState)(initialInputType || 'text'),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      inputType = _useState4[0],
      setInputType = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      isAccessoryOpen = _useState6[0],
      setAccessoryOpen = _useState6[1];

  var _useState7 = (0, _react.useState)(''),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      accessoryContent = _useState8[0],
      setAccessoryContent = _useState8[1];

  var _useState9 = (0, _react.useState)(null),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      pastedImage = _useState10[0],
      setPastedImage = _useState10[1];

  var composerRef = (0, _react.useRef)(null);
  var inputRef = (0, _react.useRef)(null);
  var focused = (0, _react.useRef)(false);
  var blurTimer = (0, _react.useRef)();
  var popoverTarget = (0, _react.useRef)();
  var isMountRef = (0, _react.useRef)(false);

  var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      isWide = _useState12[0],
      setWide = _useState12[1];

  (0, _react.useEffect)(function () {
    var mq = wideBreakpoint && window.matchMedia ? window.matchMedia("(min-width: ".concat(wideBreakpoint, ")")) : false;

    function handleMq(e) {
      setWide(e.matches);
    }

    setWide(mq && mq.matches);

    if (mq) {
      mq.addListener(handleMq);
    }

    return function () {
      if (mq) {
        mq.removeListener(handleMq);
      }
    };
  }, [wideBreakpoint]);
  (0, _react.useEffect)(function () {
    (0, _toggleClass.default)('S--wide', isWide);

    if (!isWide) {
      setAccessoryContent('');
    }
  }, [isWide]);
  (0, _react.useEffect)(function () {
    if (isMountRef.current && onAccessoryToggle) {
      onAccessoryToggle(isAccessoryOpen);
    }
  }, [isAccessoryOpen]);
  (0, _react.useEffect)(function () {
    isMountRef.current = true;
    (0, _riseInput.default)(inputRef.current, composerRef.current);
  }, []);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      setText: function setText(val) {
        _setText(val);
      }
    };
  });

  function handleInputTypeChange() {
    var isVoice = inputType === 'voice';
    var nextType = isVoice ? 'text' : 'voice';
    setInputType(nextType);

    if (isVoice) {
      var input = inputRef.current;
      input.focus(); // eslint-disable-next-line no-multi-assign

      input.selectionStart = input.selectionEnd = input.value.length;
    }

    if (onInputTypeChange) {
      onInputTypeChange(nextType);
    }
  }

  function handleInputFocus(e) {
    clearTimeout(blurTimer.current);
    (0, _toggleClass.default)(NO_HOME_BAR, true);
    focused.current = true;

    if (onFocus) {
      onFocus(e);
    }
  }

  function handleInputBlur(e) {
    blurTimer.current = setTimeout(function () {
      (0, _toggleClass.default)(NO_HOME_BAR, false);
      focused.current = false;
    }, 0);

    if (onBlur) {
      onBlur(e);
    }
  }

  function send() {
    onSend('text', text);

    _setText('');

    if (focused.current) {
      inputRef.current.focus();
    }
  }

  function handleInputKeyDown(e) {
    if (!e.shiftKey && e.keyCode === 13) {
      send();
      e.preventDefault();
    }
  }

  function handleTextChange(value, e) {
    _setText(value);

    if (onChange) {
      onChange(value, e);
    }
  }

  function handlePaste(e) {
    (0, _parseDataTransfer.default)(e, function (file) {
      setPastedImage(file);
    });
  }

  function handleImageCancel() {
    setPastedImage(null);
  }

  function handleImageSend() {
    if (onImageSend && pastedImage) {
      onImageSend(pastedImage).then(function () {
        setPastedImage(null);
      });
    }
  }

  function handleSendBtnClick(e) {
    send();
    e.preventDefault();
  }

  function handleAccessoryToggle() {
    setAccessoryOpen(!isAccessoryOpen);
  }

  function handleAccessoryBlur() {
    setTimeout(function () {
      setAccessoryOpen(false);
      setAccessoryContent('');
    });
  }

  function handleToolbarClick(item, e) {
    if (onToolbarClick) {
      onToolbarClick(item, e);
    }

    if (item.render) {
      popoverTarget.current = e.currentTarget;
      setAccessoryContent(item.render);
    }
  }

  function handlePopoverClose() {
    setAccessoryContent('');
  }

  function renderExtra() {
    var accessory = accessoryContent || /*#__PURE__*/_react.default.createElement(_Toolbar.Toolbar, {
      items: toolbar,
      onClick: handleToolbarClick
    });

    return /*#__PURE__*/_react.default.createElement(_ClickOutside.ClickOutside, {
      onClick: handleAccessoryBlur
    }, accessory);
  }

  var isInputText = inputType === 'text';
  var inputTypeIcon = isInputText ? 'mic' : 'keyboard';
  var hasToolbar = toolbar.length > 0;

  var renderInput = function renderInput() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _clsx.default)({
        'S--invisible': !isInputText
      })
    }, /*#__PURE__*/_react.default.createElement(_Input.Input, {
      className: "Composer-input",
      value: text,
      rows: 1,
      autoSize: true,
      ref: inputRef,
      placeholder: placeholder,
      enterKeyHint: "send",
      onFocus: handleInputFocus,
      onBlur: handleInputBlur,
      onKeyDown: handleInputKeyDown,
      onChange: handleTextChange,
      onPaste: onImageSend ? handlePaste : undefined
    }), pastedImage && /*#__PURE__*/_react.default.createElement(_SendConfirm.SendConfirm, {
      file: pastedImage,
      onCancel: handleImageCancel,
      onSend: handleImageSend
    }));
  };

  if (isWide) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "Composer Composer--lg",
      ref: composerRef
    }, hasToolbar && /*#__PURE__*/_react.default.createElement("div", {
      className: "Composer-toolbar"
    }, toolbar.map(function (item) {
      return /*#__PURE__*/_react.default.createElement(_ToolbarItem.ToolbarItem, {
        item: item,
        onClick: function onClick(e) {
          return handleToolbarClick(item, e);
        },
        key: item.type
      });
    })), accessoryContent && /*#__PURE__*/_react.default.createElement(_Popover.Popover, {
      active: !!accessoryContent,
      target: popoverTarget.current,
      onClose: handlePopoverClose
    }, accessoryContent), /*#__PURE__*/_react.default.createElement("div", {
      className: "Composer-inputWrap"
    }, renderInput()), /*#__PURE__*/_react.default.createElement(_Action.Action, {
      className: "Composer-sendBtn",
      icon: "paper-plane",
      color: "primary",
      disabled: !text,
      onMouseDown: handleSendBtnClick,
      "aria-label": "\u53D1\u9001"
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "Composer",
    ref: composerRef
  }, recorder.canRecord && /*#__PURE__*/_react.default.createElement(_Action.Action, {
    className: "Composer-inputTypeBtn",
    "data-icon": inputTypeIcon,
    icon: inputTypeIcon,
    onClick: handleInputTypeChange,
    "aria-label": isInputText ? '切换到语音输入' : '切换到键盘输入'
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "Composer-inputWrap"
  }, renderInput(), !isInputText && /*#__PURE__*/_react.default.createElement(_Recorder.Recorder, recorder)), !text && rightAction && /*#__PURE__*/_react.default.createElement(_Action.Action, rightAction), hasToolbar && /*#__PURE__*/_react.default.createElement(_Action.Action, {
    className: (0, _clsx.default)('Composer-toggleBtn', {
      active: isAccessoryOpen
    }),
    icon: "plus",
    onClick: handleAccessoryToggle,
    "aria-label": isAccessoryOpen ? '关闭工具栏' : '展开工具栏'
  }), text && /*#__PURE__*/_react.default.createElement(_Action.Action, {
    className: "Composer-sendBtn",
    icon: "paper-plane",
    color: "primary",
    onMouseDown: handleSendBtnClick,
    "aria-label": "\u53D1\u9001"
  })), isAccessoryOpen && renderExtra());
});

exports.Composer = Composer;