"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Form = require("../Form");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function renderCounter() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var maxLength = arguments.length > 1 ? arguments[1] : undefined;
  return maxLength ? /*#__PURE__*/_react.default.createElement("div", {
    className: "Input-counter"
  }, "".concat(value.length, "/").concat(maxLength)) : null;
}

var Input = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var className = props.className,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      value = props.value,
      placeholder = props.placeholder,
      _props$rows = props.rows,
      oRows = _props$rows === void 0 ? 1 : _props$rows,
      _props$minRows = props.minRows,
      minRows = _props$minRows === void 0 ? oRows : _props$minRows,
      _props$maxRows = props.maxRows,
      maxRows = _props$maxRows === void 0 ? 5 : _props$maxRows,
      maxLength = props.maxLength,
      multiline = props.multiline,
      autoSize = props.autoSize,
      onChange = props.onChange,
      other = (0, _objectWithoutProperties2.default)(props, ["className", "type", "value", "placeholder", "rows", "minRows", "maxRows", "maxLength", "multiline", "autoSize", "onChange"]);
  var initialRows = oRows;

  if (initialRows < minRows) {
    initialRows = minRows;
  } else if (initialRows > maxRows) {
    initialRows = maxRows;
  }

  var _useState = (0, _react.useState)(initialRows),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      rows = _useState2[0],
      setRows = _useState2[1];

  var _useState3 = (0, _react.useState)(21),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lineHeight = _useState4[0],
      setLineHeight = _useState4[1];

  var inputRef = ref || (0, _react.useRef)(null);
  var theme = (0, _react.useContext)(_Form.ThemeContext);
  var isMultiline = multiline || autoSize || oRows > 1;
  var Element = isMultiline ? 'textarea' : 'input';
  var hasCounter = !!maxLength;
  var isLight = theme === 'light';
  (0, _react.useEffect)(function () {
    var lhStr = getComputedStyle(inputRef.current, null).lineHeight;
    var lh = Number(lhStr.replace('px', ''));

    if (lh !== lineHeight) {
      setLineHeight(lh);
    }
  }, []);

  function updateRow() {
    if (!autoSize) return;
    var target = inputRef.current;
    var prevRows = target.rows;
    target.rows = minRows;

    if (placeholder) {
      target.placeholder = '';
    } // eslint-disable-next-line no-bitwise


    var currentRows = ~~(target.scrollHeight / lineHeight);

    if (currentRows === prevRows) {
      target.rows = currentRows;
    }

    if (currentRows >= maxRows) {
      target.rows = maxRows;
      target.scrollTop = target.scrollHeight;
    }

    setRows(currentRows < maxRows ? currentRows : maxRows);

    if (placeholder) {
      target.placeholder = placeholder;
    }
  }

  (0, _react.useEffect)(function () {
    if (value === '') {
      setRows(initialRows);
    } else {
      updateRow();
    }
  }, [value]);

  function handleChange(e) {
    updateRow();

    if (onChange) {
      var valueFromEvent = e.target.value;
      var shouldTrim = isMultiline && maxLength && valueFromEvent.length > maxLength;
      var val = shouldTrim ? valueFromEvent.substr(0, maxLength) : valueFromEvent;
      onChange(val, e);
    }
  }

  var inputProps = _objectSpread(_objectSpread({}, other), {}, {
    className: (0, _clsx.default)('Input', className),
    type: type,
    ref: inputRef,
    rows: rows,
    value: value,
    placeholder: placeholder,
    maxLength: maxLength,
    onChange: handleChange
  });

  if (isLight || hasCounter) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _clsx.default)('InputWrapper', {
        'is-light': isLight,
        'has-counter': hasCounter
      })
    }, /*#__PURE__*/_react.default.createElement(Element, inputProps), isLight && /*#__PURE__*/_react.default.createElement("div", {
      className: "Input-line"
    }), renderCounter(value, maxLength));
  }

  return /*#__PURE__*/_react.default.createElement(Element, inputProps);
});

exports.Input = Input;