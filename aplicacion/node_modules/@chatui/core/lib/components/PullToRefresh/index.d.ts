import React from 'react';
declare type PullToRefreshStatus = 'pending' | 'pull' | 'active' | 'loading';
export declare type PullToRefreshProps = typeof PullToRefresh.defaultProps & {
    maxDistance?: number;
    onRefresh?: () => Promise<any>;
    onScroll?: (event: React.UIEvent<HTMLDivElement, UIEvent>) => void;
    renderIndicator?: (status: PullToRefreshStatus, distance: number) => React.ReactNode;
};
declare type PullToRefreshState = {
    distance: number;
    status: PullToRefreshStatus;
    dropped: boolean;
    disabled: boolean;
};
export declare class PullToRefresh extends React.Component<PullToRefreshProps, PullToRefreshState> {
    wrapperRef: React.RefObject<HTMLDivElement>;
    contentRef: React.RefObject<HTMLDivElement>;
    startY: number;
    useFallback: boolean;
    canPull: boolean;
    static defaultProps: {
        distance: number;
        loadingDistance: number;
        distanceRatio: number;
        loadMoreText: string;
        renderIndicator(status: PullToRefreshStatus): JSX.Element | null;
    };
    constructor(props: PullToRefreshProps);
    componentDidMount(): void;
    setContentStyle(y: number): void;
    touchStart: (e: TouchEvent) => void;
    touchMove: (e: TouchEvent) => void;
    touchEnd: () => void;
    scrollTo: ({ y, animated }: {
        y: number;
        animated: boolean;
    }) => void;
    scrollToEnd: ({ animated }?: {
        animated?: boolean | undefined;
    }) => void;
    handleLoadMore: () => void;
    reset(): void;
    render(): JSX.Element;
}
export {};
