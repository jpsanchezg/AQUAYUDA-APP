"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PullToRefresh = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _style = require("../../utils/style");

var _Icon = require("../Icon");

var _Flex = require("../Flex");

var _Button = require("../Button");

var _canUse = _interopRequireDefault(require("../../utils/canUse"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var willPreventDefault = (0, _canUse.default)('passiveListener') ? {
  passive: false
} : false; // const willNotPreventDefault = supportsPassive ? { passive: true } : false;

var PullToRefresh = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(PullToRefresh, _React$Component);

  var _super = _createSuper(PullToRefresh);

  function PullToRefresh(props) {
    var _this;

    (0, _classCallCheck2.default)(this, PullToRefresh);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "wrapperRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "contentRef", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startY", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "useFallback", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "canPull", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "touchStart", function (e) {
      _this.startY = e.touches[0].clientY;
      _this.canPull = _this.wrapperRef.current.scrollTop === 0;

      if (_this.canPull) {
        _this.setState({
          status: 'pull',
          dropped: false
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "touchMove", function (e) {
      var _this$props = _this.props,
          distance = _this$props.distance,
          maxDistance = _this$props.maxDistance,
          distanceRatio = _this$props.distanceRatio;
      var status = _this.state.status;
      var currentY = e.touches[0].clientY;
      if (!_this.canPull || currentY < _this.startY || status === 'loading') return;
      var dist = (currentY - _this.startY) / distanceRatio;

      if (maxDistance && dist > maxDistance) {
        dist = maxDistance;
      }

      if (dist > 0) {
        if (e.cancelable) {
          e.preventDefault();
        }

        e.stopPropagation();

        _this.setContentStyle(dist);

        _this.setState({
          distance: dist,
          status: dist >= distance ? 'active' : 'pull'
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "touchEnd", function () {
      var status = _this.state.status;

      _this.setState({
        dropped: true
      });

      if (status === 'active') {
        _this.handleLoadMore();
      } else {
        _this.reset();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTo", function (_ref) {
      var y = _ref.y,
          _ref$animated = _ref.animated,
          animated = _ref$animated === void 0 ? true : _ref$animated;
      var scroller = _this.wrapperRef.current;

      if ((0, _canUse.default)('smoothScroll') && animated) {
        scroller.scrollTo({
          top: y,
          behavior: 'smooth'
        });
      } else {
        scroller.scrollTop = y;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollToEnd", function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$animated = _ref2.animated,
          animated = _ref2$animated === void 0 ? true : _ref2$animated;

      var scroller = _this.wrapperRef.current;
      var y = scroller.scrollHeight - scroller.offsetHeight;

      _this.scrollTo({
        y: y,
        animated: animated
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleLoadMore", function () {
      var _this$props2 = _this.props,
          loadingDistance = _this$props2.loadingDistance,
          onRefresh = _this$props2.onRefresh;
      var scroller = _this.wrapperRef.current;

      _this.setState({
        status: 'loading'
      }, function () {
        if (!_this.useFallback) {
          _this.setContentStyle(loadingDistance);
        }
      });

      try {
        var sh = scroller.scrollHeight;
        onRefresh().then(function (res) {
          var handleOffset = function handleOffset() {
            _this.scrollTo({
              y: scroller.scrollHeight - sh - 50,
              animated: false
            });
          }; // 考虑做成可配置


          handleOffset();
          setTimeout(handleOffset, 150);
          setTimeout(handleOffset, 300);

          _this.reset();

          if (res && res.noMore) {
            _this.setState({
              disabled: true
            });
          }
        });
      } catch (ex) {
        // eslint-disable-next-line no-console
        console.error(ex);

        _this.reset();
      }
    });
    _this.state = {
      distance: 0,
      status: 'pending',
      // pending | pull | active | loading
      dropped: false,
      disabled: !props.onRefresh
    };
    _this.useFallback = !(0, _canUse.default)('touch');
    return _this;
  }

  (0, _createClass2.default)(PullToRefresh, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var disabled = this.state.disabled;
      if (disabled || this.useFallback) return;
      var wrapper = this.wrapperRef.current;

      if (wrapper) {
        wrapper.addEventListener('touchstart', this.touchStart);
        wrapper.addEventListener('touchmove', this.touchMove, willPreventDefault);
        wrapper.addEventListener('touchend', this.touchEnd);
        wrapper.addEventListener('touchcancel', this.touchEnd);
      }
    }
  }, {
    key: "setContentStyle",
    value: function setContentStyle(y) {
      var content = this.contentRef.current;

      if (content) {
        (0, _style.setTransform)(content, "translate3d(0px,".concat(y, "px,0)"));
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setState({
        distance: 0,
        status: 'pending'
      });
      this.setContentStyle(0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          renderIndicator = _this$props3.renderIndicator,
          loadMoreText = _this$props3.loadMoreText,
          children = _this$props3.children,
          onScroll = _this$props3.onScroll;
      var _this$state = this.state,
          status = _this$state.status,
          distance = _this$state.distance,
          dropped = _this$state.dropped,
          disabled = _this$state.disabled;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "PullToRefresh",
        ref: this.wrapperRef,
        onScroll: onScroll
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "PullToRefresh-inner"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _clsx.default)('PullToRefresh-content', {
          'PullToRefresh-transition': dropped
        }),
        ref: this.contentRef
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "PullToRefresh-indicator"
      }, renderIndicator(status, distance)), !disabled && this.useFallback && /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
        className: "PullToRefresh-fallback",
        center: true
      }, renderIndicator(status, distance), /*#__PURE__*/_react.default.createElement(_Button.Button, {
        className: "PullToRefresh-loadMore",
        variant: "text",
        onClick: this.handleLoadMore
      }, loadMoreText)), _react.default.Children.only(children))));
    }
  }]);
  return PullToRefresh;
}(_react.default.Component);

exports.PullToRefresh = PullToRefresh;
(0, _defineProperty2.default)(PullToRefresh, "defaultProps", {
  distance: 30,
  loadingDistance: 30,
  distanceRatio: 2,
  loadMoreText: '点击加载更多',
  renderIndicator: function renderIndicator(status) {
    if (status === 'active' || status === 'loading') {
      return /*#__PURE__*/_react.default.createElement(_Icon.Icon, {
        className: "PullToRefresh-spinner",
        type: "spinner",
        spin: true
      });
    }

    return null;
  }
});