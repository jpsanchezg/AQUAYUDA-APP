"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _smoothScroll = _interopRequireDefault(require("../../utils/smoothScroll"));

var _useNextId = _interopRequireDefault(require("../../hooks/useNextId"));

var TabItem = function TabItem(props) {
  var active = props.active,
      index = props.index,
      children = props.children,
      onClick = props.onClick,
      others = (0, _objectWithoutProperties2.default)(props, ["active", "index", "children", "onClick"]);

  function handleClick(e) {
    onClick(index, e);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "Tabs-navItem"
  }, /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({
    className: (0, _clsx.default)('Tabs-navLink', {
      active: active
    }),
    type: "button",
    role: "tab",
    "aria-selected": active,
    onClick: handleClick
  }, others), children));
};

var TabsPane = function TabsPane(props) {
  var active = props.active,
      children = props.children,
      others = (0, _objectWithoutProperties2.default)(props, ["active", "children"]);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    className: (0, _clsx.default)('Tabs-pane', {
      active: active
    })
  }, others), children);
};

var Tabs = function Tabs(props) {
  var className = props.className,
      _props$index = props.index,
      oIndex = _props$index === void 0 ? 0 : _props$index,
      scrollable = props.scrollable,
      hideNavIfOnlyOne = props.hideNavIfOnlyOne,
      children = props.children,
      onChange = props.onChange;

  var _useState = (0, _react.useState)({}),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pointerStyles = _useState2[0],
      setPointerStyles = _useState2[1];

  var _useState3 = (0, _react.useState)(oIndex || 0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      index = _useState4[0],
      setIndex = _useState4[1];

  var indexRef = (0, _react.useRef)(index);
  var navRef = (0, _react.useRef)(null);
  var headers = [];
  var contents = [];
  var tabPaneId = (0, _useNextId.default)('tabs-');

  function handleIndexChange(idx, e) {
    setIndex(idx);

    if (onChange) {
      onChange(idx, e);
    }
  }

  _react.default.Children.forEach(children, function (item, idx) {
    if (!item) return;
    var active = index === idx;
    var id = "".concat(tabPaneId, "-").concat(idx);
    headers.push( /*#__PURE__*/_react.default.createElement(TabItem, {
      active: active,
      index: idx,
      key: idx,
      onClick: handleIndexChange,
      "aria-controls": id,
      tabIndex: active ? -1 : 0
    }, item.props.label));

    if (item.props.children) {
      contents.push( /*#__PURE__*/_react.default.createElement(TabsPane, {
        active: active,
        key: idx,
        id: id
      }, item.props.children));
    }
  });

  (0, _react.useEffect)(function () {
    setIndex(oIndex);
  }, [oIndex]);

  function movePointer() {
    var nav = navRef.current;
    if (!nav) return;
    var currentNav = nav.children[indexRef.current];
    if (!currentNav) return;
    var tab = currentNav.firstChild;
    var _ref = tab,
        tabWidth = _ref.offsetWidth,
        tabOffsetLeft = _ref.offsetLeft;
    setPointerStyles({
      transform: "translateX(".concat(tabOffsetLeft, "px)"),
      width: "".concat(tabWidth, "px")
    });

    if (scrollable) {
      (0, _smoothScroll.default)({
        el: nav,
        to: tabOffsetLeft + tabWidth / 2 - nav.offsetWidth / 2,
        x: true
      });
    }
  }

  (0, _react.useEffect)(function () {
    var nav = navRef.current;
    var ro;

    if (nav && 'ResizeObserver' in window) {
      ro = new ResizeObserver(movePointer);
      ro.observe(nav);
    }

    return function () {
      if (ro && nav) {
        ro.unobserve(nav);
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    indexRef.current = index;
    movePointer();
  }, [index]);
  var needNav = headers.length > (hideNavIfOnlyOne ? 1 : 0);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _clsx.default)('Tabs', {
      'Tabs--scrollable': scrollable
    }, className)
  }, needNav && /*#__PURE__*/_react.default.createElement("nav", {
    className: "Tabs-nav",
    role: "tablist",
    ref: navRef
  }, headers, /*#__PURE__*/_react.default.createElement("span", {
    className: "Tabs-navPointer",
    style: pointerStyles
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "Tabs-content"
  }, contents));
};

exports.Tabs = Tabs;