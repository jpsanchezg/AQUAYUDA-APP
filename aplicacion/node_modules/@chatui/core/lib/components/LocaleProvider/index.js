"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocale = exports.LocaleContext = exports.LocaleProvider = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _locales = _interopRequireDefault(require("./locales"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var LocaleContext = /*#__PURE__*/_react.default.createContext(undefined);

exports.LocaleContext = LocaleContext;
var DEFAULT_LOCALE = 'en-US';

var LocaleProvider = function LocaleProvider(_ref) {
  var locale = _ref.locale,
      locales = _ref.locales,
      children = _ref.children;
  return /*#__PURE__*/_react.default.createElement(LocaleContext.Provider, {
    value: {
      locale: locale,
      locales: locales
    }
  }, children);
};

exports.LocaleProvider = LocaleProvider;
LocaleProvider.defaultProps = {
  locale: DEFAULT_LOCALE
};

var useLocale = function useLocale(comp) {
  var localeContext = (0, _react.useContext)(LocaleContext);
  var locale = localeContext.locale,
      locales = localeContext.locales;
  var defaultStrings = locale && _locales.default[locale] || _locales.default[DEFAULT_LOCALE];
  var strings = locales ? _objectSpread(_objectSpread({}, defaultStrings), locales) : defaultStrings;

  if (comp) {
    strings = strings[comp];
  }

  return {
    locale: locale,
    trans: function trans(key) {
      return key ? strings[key] : strings;
    }
  };
};

exports.useLocale = useLocale;