"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _useMessages10 = _interopRequireDefault(require("../useMessages"));

afterEach(_react2.cleanup);
describe('useMessages', function () {
  it('should be empty array by default', function () {
    function Test() {
      var _useMessages = (0, _useMessages10.default)(),
          messages = _useMessages.messages;

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t, i) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: i
        }, t);
      }));
    }

    var _render = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render.queryAllByTestId;

    expect(queryAllByTestId('item').length).toBe(0);
  });
  it('should have initial value', function () {
    function Test() {
      var _useMessages2 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1'
      }, {
        type: 'test',
        content: 'test2'
      }]),
          messages = _useMessages2.messages;

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t, i) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.content);
      }));
    }

    var _render2 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render2.queryAllByTestId;

    expect(queryAllByTestId('item').length).toBe(2);
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test2');
  });
  it('should prepend messages', function () {
    function Test() {
      var _useMessages3 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages3.messages,
          prependMsgs = _useMessages3.prependMsgs;

      function handleClick() {
        prependMsgs([{
          type: 'test',
          content: 'test3',
          _id: 3
        }, {
          type: 'test',
          content: 'test4',
          _id: 4
        }]);
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: t._id
        }, t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render3 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render3.queryAllByTestId,
        getByTestId = _render3.getByTestId;

    _react2.fireEvent.click(getByTestId('btn'));

    expect(queryAllByTestId('item').length).toBe(4);
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test3');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test4');
    expect(queryAllByTestId('item')[2]).toHaveTextContent('test1');
    expect(queryAllByTestId('item')[3]).toHaveTextContent('test2');
  });
  it('should append message', function () {
    function Test() {
      var _useMessages4 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages4.messages,
          appendMsg = _useMessages4.appendMsg;

      function handleClick() {
        appendMsg({
          type: 'test',
          content: 'test3',
          _id: 3
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t, i) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render4 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render4.queryAllByTestId,
        getByTestId = _render4.getByTestId;

    _react2.fireEvent.click(getByTestId('btn'));

    expect(queryAllByTestId('item').length).toBe(3);
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test1');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test2');
    expect(queryAllByTestId('item')[2]).toHaveTextContent('test3');
  });
  it('should update message', function () {
    function Test() {
      var _useMessages5 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages5.messages,
          updateMsg = _useMessages5.updateMsg;

      function handleClick() {
        updateMsg(2, {
          type: 'test',
          content: 'test3'
        });
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t, i) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render5 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render5.queryAllByTestId,
        getByTestId = _render5.getByTestId;

    _react2.fireEvent.click(getByTestId('btn'));

    expect(queryAllByTestId('item').length).toBe(2);
    expect(queryAllByTestId('item')[0]).toHaveTextContent('test1');
    expect(queryAllByTestId('item')[1]).toHaveTextContent('test3');
  });
  it('should delete message', function () {
    function Test() {
      var _useMessages6 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages6.messages,
          deleteMsg = _useMessages6.deleteMsg;

      function handleClick() {
        deleteMsg(2);
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t, i) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: i
        }, t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "btn",
        onClick: handleClick
      }));
    }

    var _render6 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render6.queryAllByTestId,
        getByTestId = _render6.getByTestId;

    _react2.fireEvent.click(getByTestId('btn'));

    expect(queryAllByTestId('item').length).toBe(1);
  });
  it('should toggle typing bubble', function () {
    function Test() {
      var _useMessages7 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages7.messages,
          setTyping = _useMessages7.setTyping;

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: t._id
        }, t.type === 'typing' ? t.type : t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "add",
        onClick: function onClick() {
          setTyping(true);
        }
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "remove",
        onClick: function onClick() {
          setTyping(false);
        }
      }));
    }

    var _render7 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render7.queryAllByTestId,
        getByTestId = _render7.getByTestId;

    _react2.fireEvent.click(getByTestId('add'));

    expect(queryAllByTestId('item').length).toBe(3);
    expect(queryAllByTestId('item')[2]).toHaveTextContent('typing');

    _react2.fireEvent.click(getByTestId('remove'));

    expect(queryAllByTestId('item').length).toBe(2);
  });
  it('should ignore when call `setTyping` twice', function () {
    function Test() {
      var _useMessages8 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages8.messages,
          setTyping = _useMessages8.setTyping;

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: t._id
        }, t.type === 'typing' ? t.type : t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "add",
        onClick: function onClick() {
          setTyping(true);
        }
      }));
    }

    var _render8 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render8.queryAllByTestId,
        getByTestId = _render8.getByTestId;

    _react2.fireEvent.click(getByTestId('add'));

    _react2.fireEvent.click(getByTestId('add'));

    expect(queryAllByTestId('item').length).toBe(3);
    expect(queryAllByTestId('item')[2]).toHaveTextContent('typing');
  });
  it('should replace typing bubble when append', function () {
    function Test() {
      var _useMessages9 = (0, _useMessages10.default)([{
        type: 'test',
        content: 'test1',
        _id: 1
      }, {
        type: 'test',
        content: 'test2',
        _id: 2
      }]),
          messages = _useMessages9.messages,
          setTyping = _useMessages9.setTyping,
          appendMsg = _useMessages9.appendMsg;

      return /*#__PURE__*/_react.default.createElement("div", {
        "data-testid": "list"
      }, messages.map(function (t) {
        return /*#__PURE__*/_react.default.createElement("span", {
          "data-testid": "item",
          key: t._id
        }, t.type === 'typing' ? t.type : t.content);
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "typingBtn",
        onClick: function onClick() {
          setTyping(true);
        }
      }), /*#__PURE__*/_react.default.createElement("button", {
        "data-testid": "appendBtn",
        onClick: function onClick() {
          appendMsg({
            type: 'test',
            content: 'test3',
            _id: 3
          });
        }
      }));
    }

    var _render9 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(Test, null)),
        queryAllByTestId = _render9.queryAllByTestId,
        getByTestId = _render9.getByTestId;

    _react2.fireEvent.click(getByTestId('typingBtn'));

    expect(queryAllByTestId('item')[2]).toHaveTextContent('typing');

    _react2.fireEvent.click(getByTestId('appendBtn'));

    expect(queryAllByTestId('item')[2]).toHaveTextContent('test3');
  });
});